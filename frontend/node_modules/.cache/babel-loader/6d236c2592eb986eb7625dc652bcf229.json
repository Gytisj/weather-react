{"ast":null,"code":"export const getCitiesWeatherData = async cities => {\n  return Promise.all(cities.map(async cityName => {\n    const result = await fetchCityDataByName(cityName);\n    return result;\n  })).then(result => {\n    return result;\n  });\n};\nexport const fetchCityDataByName = async cityName => {\n  const url = await fetch(`https://api.openweathermap.org/data/2.5/weather?q=${cityName}&units=metric&APPID=bbb8744884025e6b8e1d8c854b9f4566`);\n  const data = await url.json();\n\n  if (url.status === 200) {\n    return data;\n  }\n};\nexport const addCityForCurrentUser = async city => {\n  let token = localStorage.getItem('x-auth');\n  fetch(`http://localhost:4000/api/v1/favorites/addCity`, {\n    method: 'PATCH',\n    body: JSON.stringify(city),\n    headers: {\n      'Content-Type': 'application/json',\n      'x-auth': token\n    }\n  }).then(header => {\n    if (!header.ok) {\n      throw Error(header);\n    }\n\n    return header.json();\n  }).then(response => {\n    console.log(response);\n    alert('Event status updated!');\n  }).catch(e => {\n    console.log(e);\n    alert('Event set failled!');\n  });\n};\nexport const getAllFavoriteCities = () => {\n  let token = localStorage.getItem('x-auth');\n  fetch(`http://localhost:4000/api/v1/favorites/getAllCities`, {\n    method: 'GET',\n    headers: {\n      'Content-Type': 'application/json',\n      'x-auth': token\n    }\n  }).then(header => {\n    if (!header.ok) {\n      throw Error(header);\n    }\n\n    return header.json();\n  }).then(response => {\n    console.log(response);\n    alert('Event status updated!');\n  }).catch(e => {\n    console.log(e);\n    alert('Event set failled!');\n  });\n};","map":{"version":3,"sources":["/Users/gytexas/Desktop/course-project/course-project/frontend/src/redux/actions/actions.js"],"names":["getCitiesWeatherData","cities","Promise","all","map","cityName","result","fetchCityDataByName","then","url","fetch","data","json","status","addCityForCurrentUser","city","token","localStorage","getItem","method","body","JSON","stringify","headers","header","ok","Error","response","console","log","alert","catch","e","getAllFavoriteCities"],"mappings":"AAAA,OAAO,MAAMA,oBAAoB,GAAG,MAAMC,MAAN,IAAgB;AAClD,SAAOC,OAAO,CAACC,GAAR,CACLF,MAAM,CAACG,GAAP,CAAW,MAAMC,QAAN,IAAkB;AAC3B,UAAMC,MAAM,GAAG,MAAMC,mBAAmB,CAACF,QAAD,CAAxC;AACA,WAAOC,MAAP;AACD,GAHD,CADK,EAKLE,IALK,CAKAF,MAAM,IAAI;AACf,WAAOA,MAAP;AACD,GAPM,CAAP;AAQD,CATM;AAWP,OAAO,MAAMC,mBAAmB,GAAG,MAAMF,QAAN,IAAkB;AACnD,QAAMI,GAAG,GAAG,MAAMC,KAAK,CACpB,qDAAoDL,QAAS,sDADzC,CAAvB;AAGA,QAAMM,IAAI,GAAG,MAAMF,GAAG,CAACG,IAAJ,EAAnB;;AACA,MAAIH,GAAG,CAACI,MAAJ,KAAe,GAAnB,EAAwB;AACtB,WAAOF,IAAP;AACD;AACF,CARM;AAUP,OAAO,MAAMG,qBAAqB,GAAG,MAAMC,IAAN,IAAc;AACjD,MAAIC,KAAK,GAAGC,YAAY,CAACC,OAAb,CAAqB,QAArB,CAAZ;AAEAR,EAAAA,KAAK,CAAE,gDAAF,EAAmD;AACtDS,IAAAA,MAAM,EAAE,OAD8C;AAEtDC,IAAAA,IAAI,EAAEC,IAAI,CAACC,SAAL,CAAeP,IAAf,CAFgD;AAGtDQ,IAAAA,OAAO,EAAE;AACP,sBAAgB,kBADT;AAEP,gBAAUP;AAFH;AAH6C,GAAnD,CAAL,CAQGR,IARH,CAQQgB,MAAM,IAAI;AACd,QAAI,CAACA,MAAM,CAACC,EAAZ,EAAgB;AACd,YAAMC,KAAK,CAACF,MAAD,CAAX;AACD;;AACD,WAAOA,MAAM,CAACZ,IAAP,EAAP;AACD,GAbH,EAcGJ,IAdH,CAcQmB,QAAQ,IAAI;AAChBC,IAAAA,OAAO,CAACC,GAAR,CAAYF,QAAZ;AACAG,IAAAA,KAAK,CAAC,uBAAD,CAAL;AACD,GAjBH,EAkBGC,KAlBH,CAkBSC,CAAC,IAAI;AACVJ,IAAAA,OAAO,CAACC,GAAR,CAAYG,CAAZ;AACAF,IAAAA,KAAK,CAAC,oBAAD,CAAL;AACD,GArBH;AAsBD,CAzBM;AA2BP,OAAO,MAAMG,oBAAoB,GAAG,MAAM;AACxC,MAAIjB,KAAK,GAAGC,YAAY,CAACC,OAAb,CAAqB,QAArB,CAAZ;AACAR,EAAAA,KAAK,CAAE,qDAAF,EAAwD;AAC3DS,IAAAA,MAAM,EAAE,KADmD;AAE3DI,IAAAA,OAAO,EAAE;AACP,sBAAgB,kBADT;AAEP,gBAAUP;AAFH;AAFkD,GAAxD,CAAL,CAOGR,IAPH,CAOQgB,MAAM,IAAI;AACd,QAAI,CAACA,MAAM,CAACC,EAAZ,EAAgB;AACd,YAAMC,KAAK,CAACF,MAAD,CAAX;AACD;;AACD,WAAOA,MAAM,CAACZ,IAAP,EAAP;AACD,GAZH,EAaGJ,IAbH,CAaQmB,QAAQ,IAAI;AAChBC,IAAAA,OAAO,CAACC,GAAR,CAAYF,QAAZ;AACAG,IAAAA,KAAK,CAAC,uBAAD,CAAL;AACD,GAhBH,EAiBGC,KAjBH,CAiBSC,CAAC,IAAI;AACVJ,IAAAA,OAAO,CAACC,GAAR,CAAYG,CAAZ;AACAF,IAAAA,KAAK,CAAC,oBAAD,CAAL;AACD,GApBH;AAqBD,CAvBM","sourcesContent":["export const getCitiesWeatherData = async cities => {\n  return Promise.all(\n    cities.map(async cityName => {\n      const result = await fetchCityDataByName(cityName)\n      return result\n    })\n  ).then(result => {\n    return result\n  })\n}\n\nexport const fetchCityDataByName = async cityName => {\n  const url = await fetch(\n    `https://api.openweathermap.org/data/2.5/weather?q=${cityName}&units=metric&APPID=bbb8744884025e6b8e1d8c854b9f4566`\n  )\n  const data = await url.json()\n  if (url.status === 200) {\n    return data\n  }\n}\n\nexport const addCityForCurrentUser = async city => {\n  let token = localStorage.getItem('x-auth')\n\n  fetch(`http://localhost:4000/api/v1/favorites/addCity`, {\n    method: 'PATCH',\n    body: JSON.stringify(city),\n    headers: {\n      'Content-Type': 'application/json',\n      'x-auth': token\n    }\n  })\n    .then(header => {\n      if (!header.ok) {\n        throw Error(header)\n      }\n      return header.json()\n    })\n    .then(response => {\n      console.log(response)\n      alert('Event status updated!')\n    })\n    .catch(e => {\n      console.log(e)\n      alert('Event set failled!')\n    })\n}\n\nexport const getAllFavoriteCities = () => {\n  let token = localStorage.getItem('x-auth')\n  fetch(`http://localhost:4000/api/v1/favorites/getAllCities`, {\n    method: 'GET',\n    headers: {\n      'Content-Type': 'application/json',\n      'x-auth': token\n    }\n  })\n    .then(header => {\n      if (!header.ok) {\n        throw Error(header)\n      }\n      return header.json()\n    })\n    .then(response => {\n      console.log(response)\n      alert('Event status updated!')\n    })\n    .catch(e => {\n      console.log(e)\n      alert('Event set failled!')\n    })\n}\n"]},"metadata":{},"sourceType":"module"}