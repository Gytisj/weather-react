{"ast":null,"code":"var _jsxFileName = \"/Users/gytexas/Desktop/course-project/course-project/frontend/src/pages/Main/main.js\";\nimport React, { useState, useEffect } from 'react';\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport { Button } from 'reactstrap';\nimport { Flex } from '../../components/shared/Flex/Flex';\nimport { getCitiesWeatherData } from '../../redux/actions/actions';\nimport { random } from 'faker';\nimport c from './main.module.css';\nexport const Main = () => {\n  const [regionState, setRegionState] = useState('');\n  const [regionCapitalState, setRegionCapitalState] = useState([]);\n  useEffect(() => {\n    setRegionCapitalState([]);\n  }, [regionState]);\n\n  const inputChangeHandler = event => {\n    setRegionState({ ...regionState,\n      region: event.target.value\n    });\n  };\n\n  const formSubmitHandler = async event => {\n    console.log(event);\n    event.preventDefault();\n    const regionData = await fetch(`https://restcountries.eu/rest/v2/region/${regionState.region}`);\n\n    if (regionData.status === 200) {\n      const newRegionData = await regionData.json();\n      const resultNotChecked = await getCapitalsData(newRegionData);\n      const result = resultNotChecked.filter(city => {\n        if (city.cod === '404') {\n          return null;\n        }\n\n        if (city.cod === '400') {\n          return null;\n        } else {\n          return city;\n        }\n      });\n      result.sort((a, b) => {\n        if (a.name < b.name) {\n          return -1;\n        }\n\n        if (a.name > b.name) {\n          return 1;\n        }\n\n        return 0;\n      });\n      setRegionCapitalState(...regionCapitalState, result);\n    } else {\n      alert('please enter a valid region etc. Europe, Asia, Africa, Oceania or Americas');\n    }\n  };\n\n  const getCapitalsData = newRegionData => {\n    const citiesData = newRegionData.map(city => {\n      return city.capital;\n    });\n    return getCitiesWeatherData(citiesData);\n  };\n\n  return /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(Flex, {\n    justify: \"center\",\n    align: \"center\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 69,\n      columnNumber: 7\n    }\n  }, /*#__PURE__*/React.createElement(\"form\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 70,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(\"input\", {\n    type: \"text\",\n    onChange: inputChangeHandler,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 71,\n      columnNumber: 11\n    }\n  }), /*#__PURE__*/React.createElement(Button, {\n    type: \"submit\",\n    color: \"secondary\",\n    onClick: formSubmitHandler,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 72,\n      columnNumber: 11\n    }\n  }, \"Search Region\"))), /*#__PURE__*/React.createElement(Flex, {\n    justify: \"space-around\",\n    wrap: \"wrap\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 77,\n      columnNumber: 7\n    }\n  }, regionCapitalState.map(city => {\n    return /*#__PURE__*/React.createElement(\"div\", {\n      className: c.card,\n      key: random.uuid(),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 80,\n        columnNumber: 13\n      }\n    }, /*#__PURE__*/React.createElement(Flex, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 81,\n        columnNumber: 15\n      }\n    }, /*#__PURE__*/React.createElement(\"img\", {\n      className: c.image,\n      src: 'http://openweathermap.org/img/w/' + city.weather[0].icon + '.png',\n      alt: \"\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 82,\n        columnNumber: 17\n      }\n    }), /*#__PURE__*/React.createElement(\"img\", {\n      className: c.image,\n      src: 'http://openweathermap.org/img/w/' + city.weather[0].icon + '.png',\n      alt: \"\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 91,\n        columnNumber: 17\n      }\n    }), /*#__PURE__*/React.createElement(\"img\", {\n      className: c.image,\n      src: 'http://openweathermap.org/img/w/' + city.weather[0].icon + '.png',\n      alt: \"\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 100,\n        columnNumber: 17\n      }\n    })), /*#__PURE__*/React.createElement(\"h2\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 110,\n        columnNumber: 15\n      }\n    }, city.name), /*#__PURE__*/React.createElement(\"p\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 111,\n        columnNumber: 15\n      }\n    }, \"Temperature is: \", Math.round(city.main.temp), \"\\xB0C \", /*#__PURE__*/React.createElement(\"br\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 112,\n        columnNumber: 64\n      }\n    }), \" Feels Like: \", Math.round(city.main.feels_like), \"\\xB0C\"), /*#__PURE__*/React.createElement(\"p\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 115,\n        columnNumber: 15\n      }\n    }, \"Description: \", city.weather[0].description), /*#__PURE__*/React.createElement(Button, {\n      color: \"primary\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 116,\n        columnNumber: 15\n      }\n    }, \"Add To Favorites!\"));\n  })));\n};","map":{"version":3,"sources":["/Users/gytexas/Desktop/course-project/course-project/frontend/src/pages/Main/main.js"],"names":["React","useState","useEffect","Button","Flex","getCitiesWeatherData","random","c","Main","regionState","setRegionState","regionCapitalState","setRegionCapitalState","inputChangeHandler","event","region","target","value","formSubmitHandler","console","log","preventDefault","regionData","fetch","status","newRegionData","json","resultNotChecked","getCapitalsData","result","filter","city","cod","sort","a","b","name","alert","citiesData","map","capital","card","uuid","image","weather","icon","Math","round","main","temp","feels_like","description"],"mappings":"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","sourcesContent":["import React, { useState, useEffect } from 'react'\nimport 'bootstrap/dist/css/bootstrap.min.css'\nimport { Button } from 'reactstrap'\nimport { Flex } from '../../components/shared/Flex/Flex'\nimport { getCitiesWeatherData } from '../../redux/actions/actions'\nimport { random } from 'faker'\nimport c from './main.module.css'\n\nexport const Main = () => {\n  const [regionState, setRegionState] = useState('')\n  const [regionCapitalState, setRegionCapitalState] = useState([])\n\n  useEffect(() => {\n    setRegionCapitalState([])\n  }, [regionState])\n\n  const inputChangeHandler = event => {\n    setRegionState({\n      ...regionState,\n      region: event.target.value\n    })\n  }\n\n  const formSubmitHandler = async event => {\n    console.log(event)\n    event.preventDefault()\n    const regionData = await fetch(\n      `https://restcountries.eu/rest/v2/region/${regionState.region}`\n    )\n    if (regionData.status === 200) {\n      const newRegionData = await regionData.json()\n      const resultNotChecked = await getCapitalsData(newRegionData)\n      const result = resultNotChecked.filter(city => {\n        if (city.cod === '404') {\n          return null\n        }\n        if (city.cod === '400') {\n          return null\n        } else {\n          return city\n        }\n      })\n      result.sort((a, b) => {\n        if (a.name < b.name) {\n          return -1\n        }\n        if (a.name > b.name) {\n          return 1\n        }\n        return 0\n      })\n      setRegionCapitalState(...regionCapitalState, result)\n    } else {\n      alert(\n        'please enter a valid region etc. Europe, Asia, Africa, Oceania or Americas'\n      )\n    }\n  }\n\n  const getCapitalsData = newRegionData => {\n    const citiesData = newRegionData.map(city => {\n      return city.capital\n    })\n    return getCitiesWeatherData(citiesData)\n  }\n\n  return (\n    <>\n      <Flex justify='center' align='center'>\n        <form>\n          <input type='text' onChange={inputChangeHandler}></input>\n          <Button type='submit' color='secondary' onClick={formSubmitHandler}>\n            Search Region\n          </Button>\n        </form>\n      </Flex>\n      <Flex justify='space-around' wrap='wrap'>\n        {regionCapitalState.map(city => {\n          return (\n            <div className={c.card} key={random.uuid()}>\n              <Flex>\n                <img\n                  className={c.image}\n                  src={\n                    'http://openweathermap.org/img/w/' +\n                    city.weather[0].icon +\n                    '.png'\n                  }\n                  alt=''\n                />\n                <img\n                  className={c.image}\n                  src={\n                    'http://openweathermap.org/img/w/' +\n                    city.weather[0].icon +\n                    '.png'\n                  }\n                  alt=''\n                />\n                <img\n                  className={c.image}\n                  src={\n                    'http://openweathermap.org/img/w/' +\n                    city.weather[0].icon +\n                    '.png'\n                  }\n                  alt=''\n                />\n              </Flex>\n              <h2>{city.name}</h2>\n              <p>\n                Temperature is: {Math.round(city.main.temp)}°C <br /> Feels\n                Like: {Math.round(city.main.feels_like)}°C\n              </p>\n              <p>Description: {city.weather[0].description}</p>\n              <Button color='primary'>Add To Favorites!</Button>\n            </div>\n          )\n        })}\n      </Flex>\n    </>\n  )\n}\n"]},"metadata":{},"sourceType":"module"}